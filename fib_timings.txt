Timer unit: 1e-06 s

Total time: 8.41226 s
File: /Users/jgiesler/Dropbox/Masters/Fall 2015/430/project/algorithms/dijkstra.py
Function: dijkstra_naive at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           @do_profile()
    12                                           def dijkstra_naive(graph,source):
    13         1            4      4.0      0.0      n_nodes = len(graph)
    14                                           
    15         1            6      6.0      0.0      Q = [True] * n_nodes
    16         1            7      7.0      0.0      dist = [MAX_INT] * n_nodes  #distance from source to v
    17         1           12     12.0      0.0      prev = [None] * n_nodes #previous node in optimal path
    18                                           
    19         1            0      0.0      0.0      dist[source] = 0
    20                                           
    21      2001        76391     38.2      0.9      while sum(Q) != 0:
    22                                                   #find vertex with minimum distance
    23                                                   #print(Q)
    24      2000        75889     37.9      0.9          before = sum(Q)
    25                                                   #NOTE(jg): This is the most important line in the algorithm and is where other
    26                                                   #          Data structures are implemented
    27      2000      1652840    826.4     19.6          val, u = min((val, idx) if Q[idx] else (MAX_INT,-1) for (idx, val) in enumerate(dist))
    28      2000         1494      0.7      0.0          Q[u] = False #remove from list
    29      2000        76008     38.0      0.9          after = sum(Q)
    30      2000         1316      0.7      0.0          if before == after:
    31                                                       return (False,False)
    32      2000         1322      0.7      0.0          weights = graph[u]
    33                                           
    34   4002000      2461108      0.6     29.3          for v,edge in enumerate(weights):
    35   4000000      2524994      0.6     30.0              if edge != MAX_INT and Q[v]: #v is in Q and is neighbor
    36   1198443       754885      0.6      9.0                  alt = dist[u] + edge #alternative path
    37   1198443       777355      0.6      9.2                  if alt < dist[v]: #alternative path is better
    38      6809         4323      0.6      0.1                      dist[v] = alt
    39      6809         4302      0.6      0.1                      prev[v] = u
    40         1            0      0.0      0.0      return (dist,prev)

Timer unit: 1e-06 s

Total time: 21.1966 s
File: /Users/jgiesler/Dropbox/Masters/Fall 2015/430/project/algorithms/dijkstra.py
Function: dijkstra_fib at line 41

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    41                                           @do_profile()
    42                                           def dijkstra_fib(graph,source,stress = False):
    43         1            1      1.0      0.0      n_nodes = len(graph)
    44         1            6      6.0      0.0      Q = [True] * n_nodes
    45         1           24     24.0      0.0      dist = [MAX_INT] * n_nodes  #distance from source to v
    46         1           13     13.0      0.0      prev = [None] * n_nodes #previous node in optimal path
    47         1            0      0.0      0.0      dist[source] = 0
    48                                               
    49         1           16     16.0      0.0      H = Fib_Heap()
    50                                           
    51      2001         1173      0.6      0.0      for node,distance in enumerate(dist):
    52      2000        50409     25.2      0.2          H.add((distance,node))
    53                                           
    54      2001         1597      0.8      0.0      while H.heap.n != 0:
    55                                                   #print(H.heap.n)
    56                                                   
    57      2000       426689    213.3      2.0          dist_u, u = H.pop().key
    58      2000         1722      0.9      0.0          Q[u] = False
    59      2000         1416      0.7      0.0          weights = graph[u]
    60   2001000     15470928      7.7     73.0          for heap_node in H.get_nodes():
    61   1999000      1316431      0.7      6.2              v = heap_node.key[1]
    62   1999000      1192734      0.6      5.6              edge = weights[v]
    63   1999000      1192903      0.6      5.6              if edge != MAX_INT: #v is in Q and is neighbor
    64                                                           #we need some way of relating this to the heap 
    65   1198443       718893      0.6      3.4                  alt = dist_u + edge #alternative path
    66   1198443       759270      0.6      3.6                  if alt < dist[v]: #alternative path is better
    67      6809         4314      0.6      0.0                      dist[v] = alt
    68      6809         4280      0.6      0.0                      prev[v] = u
    69      6809        52451      7.7      0.2                      H.adjust_node(heap_node,alt)
    70      2000         1311      0.7      0.0          if stress:
    71                                                       #progress tracker - to be removed
    72                                                       print(str(S.size)+'\r',end = '')
    73         1            1      1.0      0.0      return (dist,prev)

Timer unit: 1e-06 s

Total time: 7.62636 s
File: /Users/jgiesler/Dropbox/Masters/Fall 2015/430/project/algorithms/dijkstra.py
Function: dijkstra_heap at line 75

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    75                                           @do_profile()
    76                                           def dijkstra_heap(graph,source,stress = False):
    77         1            1      1.0      0.0      n_nodes = len(graph)
    78         1            8      8.0      0.0      Q = [True] * n_nodes
    79         1            7      7.0      0.0      dist = [MAX_INT] * n_nodes  #distance from source to v
    80         1            6      6.0      0.0      prev = [None] * n_nodes #previous node in optimal path
    81         1            1      1.0      0.0      dist[source] = 0
    82         1            3      3.0      0.0      S = Heap()
    83                                           
    84      2001         2046      1.0      0.0      for node,distance in enumerate(dist):
    85      2000         9023      4.5      0.1          S.insert((distance,node))
    86                                           
    87      2001         1265      0.6      0.0      while S.size != 0:
    88                                                   #find vertex with minimum distance
    89      2000        38829     19.4      0.5          dist_u , u = S.pop() #instead of finding the minimum we just grab it. O(logn) vs O(n)
    90      2000         1273      0.6      0.0          Q[u] = False
    91                                           
    92      2000         1338      0.7      0.0          weights = graph[u]
    93                                                   
    94   4002000      2228270      0.6     29.2          for v,edge in enumerate(weights):
    95                                                       
    96                                                       # can I find a way to relate this to the decrease priority?
    97                                                       # yes. we need to iterate the heap itself and not the weight array
    98                                           
    99                                                       
   100   4000000      2276992      0.6     29.9              if edge != MAX_INT and Q[v]: #v is in Q and is neighbor
   101                                                           #we need some way of relating this to the heap
   102                                                           
   103   1198393       656829      0.5      8.6                  alt = dist_u + edge #alternative path
   104   1198393       710765      0.6      9.3                  if alt < dist[v]: #alternative path is better
   105      6866         3928      0.6      0.1                      dist[v] = alt
   106      6866         3923      0.6      0.1                      prev[v] = u
   107      6866      1690847    246.3     22.2                      S.decrease_priority(v,alt)
   108      2000         1005      0.5      0.0          if stress:
   109                                                       #progress tracker - to be removed
   110                                                       print(str(S.size)+'\r',end = '')
   111         1            0      0.0      0.0      return (dist,prev)
